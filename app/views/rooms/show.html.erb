<style type="text/css">
    footer{position: absolute;
    left: 0;
    bottom: 0;
    height: 100px;
    width: 100%;
    overflow: hidden;}
</style>
<section id="features" class="padding-30 padding-top-100 bg-primary full-height text-center" id="download">
    <div class="share_room">
        <h3>Please share this link to join the talk!</h3>
        <h4><a href="<%=room_path(@room)%>" id="subtitle" class="text-white"></a></h4>
    </div>
</section>
<div id="requirements">
    </div>
<div class="col-md-12">
<section id="roomContainer" class="cf">
                <div class='peerContainer local'>
                    <div class="local-details text-center padding-15">
                        <!-- <input id="nickInput" placeholder="You"/> -->

                        <audio id="localAudio" controls oncontextmenu="return false;" disabled></audio>
                        <img id="snapshot" src="<%=current_user.profile_image%>" class="avatar avatar-image"/>
                        <div class="">You</div>
                        <div id="meters">
      <div id="instant">
        <p class="styled">
            <progress  min="0" max="1" value=""></progress>
        </p>
        <div class="value" style="display: none;"></div>
      </div>
    </div>
                        <video id="snapshotvideo" class="avatar"></video> 
                        <a class="btn btn-sm button-mute">Mute</a>
                        <div id='countdown'></div>
                        <!-- add class of 'muted' when so -->
                        

                    </div>

                    <div class="local-controls">
                        <!-- <button class="button button-small" id="snapshotButton">Take a snapshot</button> -->
                    </div>
                </div>
                <div id="remotes">
                    
                </div>
            </section>
        </div>

       
        </div>
      <script type="text/javascript">
          // grab the room from the URL
var room;
room = "<%=params[:id]%>"
var framed = window.self !== window.top;
var hasroom = framed && document.referrer && document.referrer.split('?').length > 1;
// if (framed) {
//     room = document.referrer && document.referrer.split('?')[1];
// } else {
//     room = window.parent.location && window.parent.location.search.split('?')[1];
// }

var avatar = '<%=current_user.profile_image%>';
var hasCameras = false;
var nick = '<%=current_user.name%>'
var webrtc;

// for simplistic metrics gathering
function track(name, info) {
    if (webrtc && webrtc.connection) {
        webrtc.connection.emit('metrics', name, info || {});
    }
}

function setRoom(name) {
  
    document.getElementById('subtitle').textContent =  'Join: ' + (framed ? document.referrer + (hasroom ? '' : '?' + name) : window.parent.location.href);
}







function doJoin(room) {
    webrtc.startLocalVideo();
    webrtc.createRoom(room, function (err, name) {
        var newUrl = (framed ? document.referrer : window.parent.location.pathname) + '?' + room;
        if (!err) {
            if (!framed) window.parent.history.replaceState({foo: 'bar'}, null, newUrl);
            setRoom(room);
        } else {
            console.log('error', err, room);
            if (err === 'taken') {
                room = generateRoomName();
                doJoin(room);
            }
        }
    });
}

var queryGum = false;
if (room) {
    setRoom(room);
    queryGum = true;
} else {
    room = generateRoomName();
    document.querySelector('form#createRoom>button').disabled = false;
    document.getElementById('createRoom').onsubmit = function () {
        document.getElementById('createRoom').disabled = true;
        document.querySelector('form#createRoom>button').textContent = 'Cresating conference...';
        room = room.toLowerCase().replace(/\s/g, '-').replace(/[^A-Za-z0-9_\-]/g, '');
        doJoin(room);
        return false; 
    };
}

function GUM() {
    webrtc = new SimpleWebRTC({
        // we don't do video
        localVideoEl: '',
        remoteVideosEl: '',
        autoRequestMedia: false,
        enableDataChannels: false,
        media: {
            audio: true,
            video: false
        },
        receiveMedia: { // FIXME: remove old chrome <= 37 constraints format
            offerToReceiveAudio: 1,
            offerToReceiveVideo: 0
        },
    });

    webrtc.on('localStream', function(stream) {
        var localAudio = document.getElementById('localAudio');
        localAudio.disabled = false;
        localAudio.volume = 0;
        //localAudio.srcObject = stream; 
        if (hasCameras) {
            document.querySelector('.local-controls').style.visibility = 'visible';
        }

        var track = stream.getAudioTracks()[0];
        var btn = document.querySelector('.local .button-mute');
        btn.style.visibility = 'visible';
        btn.onclick = function() {
            track.enabled = !track.enabled;
            btn.className = 'btn btn-sm button-mute' + (track.enabled ? '' : ' muted');
            if (track.enabled){
                $('.button-mute').text('Mute');
            }
            else{
                $('.button-mute').text('Unmute');
            }
        };
    });

    webrtc.on('readyToCall', function () {
        if (room) {
            webrtc.joinRoom(room, function (err, res) {
                if (err) return;
                window.setTimeout(function () {

                    if (avatar) {
                        webrtc.sendToAll('avatar', {avatar: avatar});
                        console.log(avatar);
                    }
                    if (nick) {
                        webrtc.sendToAll('nickname', {nick: nick});
                    }
                }, 1000);
            });
        }
    });

    // working around weird simplewebrtc behaviour
    webrtc.on('videoAdded', function (video, peer) {
        document.querySelector('#container_' + webrtc.getDomId(peer) + '>div.remote-details').appendChild(video);
    });
    // called when a peer is created
    webrtc.on('createdPeer', function (peer) {
        console.log(peer);
        var remotes = document.getElementById('remotes');
        if (!remotes) return;

        var container = document.createElement('div');
        container.className = 'peerContainer';
        container.id = 'container_' + webrtc.getDomId(peer);

        // inner container
        var d = document.createElement('div');
        d.className = 'remote-details padding-15';
        container.appendChild(d);

        

        // avatar profile_image
        var avatar = document.createElement('img');
        avatar.className = 'avatar-image';
        avatar.src = '/assets/avatar-default.png';
        d.appendChild(avatar);
        // // nickname
        var nickname = document.createElement('div');
        nickname.className = 'nick';
        d.appendChild(nickname);
        // audio element
        // inserted later

        // mute button
        var mute = document.createElement('a');
        mute.className = 'btn btn-sm button-mute';
        mute.appendChild(document.createTextNode('Mute'));
        // mute.style.visibility = 'hidden';
        // d.appendChild(mute);

        mute.onclick = function() {
            alert('asfasf');
          if (peer.videoEl.muted) { // unmute
            mute.className = 'btn btn-sm button-mute';
                mute.text('Mute');
          } else { // mute
            mute.className = 'btn btn-sm button-mute muted';
             mute.text('Unmute');
          }
          peer.videoEl.muted = !peer.videoEl.muted;
        };

        if (peer && peer.pc) {
            peer.firsttime = true;
            peer.pc.on('iceConnectionStateChange', function (event) {
                var state = peer.pc.iceConnectionState;
                container.className = 'text-center peerContainer p2p' +
                    state.substr(0, 1).toUpperCase() +
                    state.substr(1);
                switch (state) {
                case 'connected':
                case 'completed':
                    //audio.srcObject = peer.stream;
                    mute.style.visibility = 'visible';
                    if (peer.firsttime) {
                        peer.firsttime = false;
                        track('iceSuccess', {
                            session: peer.sid,
                            peerprefix: peer.browserPrefix,
                            prefix: webrtc.capabilities.prefix,
                            version: webrtc.capabilities.browserVersion
                        });
                    }
                    break;
                case 'closed':
                    container.remove();
                    break;
                }
            });
        }
        remotes.appendChild(container);
    });

    webrtc.connection.on('message', function (message) {
        var peers = self.webrtc.getPeers(message.from, message.roomType);
        if (!peers && peers.length > 0) return;
        var peer = peers[0];

        // FIXME: also send current avatar and nick to newly joining participants
        var container = document.getElementById('container_' + webrtc.getDomId(peer));
        if (message.type === 'nickname') {
            container.querySelector('.nick').textContent = message.payload.nick;
        } else if (message.type === 'avatar') {
            container.querySelector('.avatar-image').src = message.payload.avatar;
        } else if (message.type === 'offer') {
            // update things
            
            if (avatar) {
                peer.send('avatar', {avatar: avatar});
            }
            if (nick) {
                peer.send('nickname', {nick: nick});
            }
        }
    });

    // local p2p/ice failure
    webrtc.on('iceFailed', function (peer) {
        console.log('local fail', peer.sid);
        track('iceFailed', {
            source: 'local',
            session: peer.sid,
            peerprefix: peer.browserPrefix,
            prefix: webrtc.capabilities.prefix,
            version: webrtc.capabilities.browserVersion
        });
    });

    // remote p2p/ice failure
    webrtc.on('connectivityError', function (peer) {
        console.log('remote fail', peer.sid);
        track('iceFailed', {
            source: 'remote',
            session: peer.sid,
            peerprefix: peer.browserPrefix,
            prefix: webrtc.capabilities.prefix,
            version: webrtc.capabilities.browserVersion
        });
    });

    if (!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia && window.RTCPeerConnection)) {
        // FIXME: show "sorry, get a modern browser" (recommending Edge)
        document.getElementById('supportWarning').style.display = 'block';
        document.querySelector('form#createRoom>button').disabled = true;
    } else if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
        navigator.mediaDevices.enumerateDevices()
        .then(function (devices) {
            var cameras = devices.filter(function(device) { return device.kind === 'videoinput'; });
            hasCameras = cameras.length;
            var mics = devices.filter(function(device) { return device.kind === 'audioinput'; });
            if (mics.length) {
                document.getElementById('requirements').style.display = 'none';
                if (queryGum) webrtc.startLocalVideo();
            } else {
                document.getElementById('microphoneWarning').style.display = 'block';
                document.querySelector('form#createRoom>button').disabled = true;
            }
        });
    }
}

$(document).ready(function(){
//     GUM();
// })

// window.onload =  function(){
   GUM();
   callaudio();
});
function createFields() {
    $('.field').remove();
    var container = $('#container');
    for(var i = 0; i < +$('input:text').val(); i++) {
        $('<div/>', {
            'class': 'field',
            'text': i + 1
        }).appendTo(container);
    }
}

function distributeFields() {
    var radius = 200;
    var fields = $('.field'), container = $('#container'),
        width = container.width(), height = container.height(),
        angle = 0, step = (2*Math.PI) / fields.length;
    fields.each(function() {
        var x = Math.round(width/2 + radius * Math.cos(angle) - $(this).width()/2);
        var y = Math.round(height/2 + radius * Math.sin(angle) - $(this).height()/2);
        if(window.console) {
            console.log($(this).text(), x, y);
        }
        $(this).css({
            left: x + 'px',
            top: y + 'px'
        });
        angle += step;
    });
}

$('input').change(function() {
    createFields();
    distributeFields();
});

createFields();
distributeFields();
      </script>